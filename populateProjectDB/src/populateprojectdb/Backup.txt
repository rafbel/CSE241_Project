//Account
        int account_id = 10000;
        int numIndividual = 0; int numFamily = 0; int numBusiness = 0;
        for (int counter = 0; counter < 1914; counter++)       
        {
            String insertString = "insert into account values (" + account_id +");";
            s.executeUpdate(insertString);
            
            //Marking that account as one of the 3 types of possible accounts:
            int randomNum = rand.nextInt(3);
            switch(randomNum)
            {
                case 0: //individual account

                    insertString = "insert into individual_account values (" + account_id +");";
                    s.executeUpdate(insertString);
                    
                    
                    numIndividual++;
                    break;
                case 1: //family account
                    insertString = "insert into family_account values (" + account_id +");";
                    s.executeUpdate(insertString);
                    numFamily++;
                    break;
                    
                case 2://business account
                    insertString = "insert into business_account values (" + account_id +");";
                    s.executeUpdate(insertString);
                    numBusiness++;
                    break;
                default:
                    break;            
            }
            
            account_id++;
        }
        
        
        
        //Fills up phone table first:
        int MEID = 10000;
        String manufacturerList[] = {"Samsung","Apple","Lenovo Motorola","Xiaomi","Huawei","LG Electronics","Sony Mobile","Microsoft"};
        
        String samsungPhones[] = {"Galaxy S7 Edge","Galaxy Note 6", "Galaxy S5", "Galaxy S3", "Galaxy S4"};
        String applePhones[] = {"iPhone 5","iPhone 5C","iPhone 6","iPhone 4","iPhone 4S"};
        String motorolaPhones[] = {"Moto X Force","Droid Turbo 2","Droid Maxx 2","Moto X Style","Moto G Turbo Edition"};
        String xiaomiPhones[] = {"Mi 5","Mi 4S","Redmi 3","Redmi Note Prime","Redmi Note 3"};
        String huaweiPhones[] = {"Honor Holly 2 Plus","Nexus 6P","Mate S","G7 Plus","Honor 5X","Y6 Pro"};
        String lgPhones[] = {"LG G5","LG V10","LG G4","LG G Flex 2"};
        String sonyPhones[] = {"Xperia X Performance","Xperia X","Xperia XA Dual","Xperia XA"};
        String microsoftPhones[] = {"Lumia 650","Lumia 950 XL Dual SIM","Lumia 950 XL","Lumia 950","Lumia 550"};
        
        for (int counter = 0; counter < numCustomers; counter++)
        {
            String model = "";
            int randomNum = rand.nextInt(8);
            String manufacturer = manufacturerList[randomNum];
            switch (randomNum)
            {
                case 0:
                    randomNum = rand.nextInt(5);
                    model = samsungPhones[randomNum];
                    break;
                case 1:
                    randomNum = rand.nextInt(5);
                    model = applePhones[randomNum];
                    break;
                case 2:
                    randomNum = rand.nextInt(5);
                    model = motorolaPhones[randomNum];
                    break;
                case 3:
                    randomNum = rand.nextInt(5);
                    model = xiaomiPhones[randomNum];
                    break;
                case 4:
                    randomNum = rand.nextInt(6);
                    model = huaweiPhones[randomNum];
                    break;
                case 5:
                    randomNum = rand.nextInt(4);
                    model = lgPhones[randomNum];
                    break;
                case 6:
                    randomNum = rand.nextInt(4);
                    model = sonyPhones[randomNum];
                    break;
                case 7:
                    randomNum = rand.nextInt(5);
                    model = microsoftPhones[randomNum];
                    break;
                default:
                    break;
                             
            }
            String insertString = "insert into phone values (" + MEID + "," + "'" + manufacturer + "','" + model + "');";

            s.executeUpdate(insertString);
            
            //Marking the phone as active or unactive:
            
            MEID++;
        }

		
		
		 //Customer
        List <String> nameList = new ArrayList<String>();
        
         //Fills up student table:
        ResultSet result;
        String searchFor = "select * from instructor";      
        result = s.executeQuery(searchFor);
        int numCustomers = 0;
        
        try 
        {
            FileReader fileR = new FileReader("randomAddressList.txt");
            BufferedReader textReader = new BufferedReader(fileR);
            String line;
            int customerID = 8000;
            result.next();
            do {
                nameList.add(result.getString("name"));
            }while (result.next());
            
            while ((line = textReader.readLine()) != null)
            {
                
                String insertAddress = line + textReader.readLine();
                if (insertAddress.length() >= 40)
                {
                   insertAddress = insertAddress.substring(0,39);
                }
                String insertString = "insert into customer values ('" + customerID + "'," + "'" + nameList.get(numCustomers) + "','" + insertAddress + "')";
                                System.out.println("Added: " + insertString);
                s.executeUpdate(insertString);
                customerID++;
                numCustomers++;
            }
            
            textReader.close();
            fileR.close();
        }
        
        catch (FileNotFoundException ex)
        {
            System.out.println("Unable to read file");
        }
        System.out.println("Customers: " + numCustomers);
		
		
		  //Account
        int account_id = 10000;
        int numIndividual = 0; int numFamily = 0; int numBusiness = 0;
        for (int counter = 0; counter < 1501; counter++)       
        {
            String insertString = "insert into account values ('" + account_id + "')";
            s.executeUpdate(insertString);
            
            //Marking that account as one of the 3 types of possible accounts:
            int randomNum = rand.nextInt(3);
            switch(randomNum)
            {
                case 0: //individual account

                    insertString = "insert into individual_account values ('" + account_id +"')";
                    s.executeUpdate(insertString);
                    numIndividual++;
                    break;
                case 1: //family account
                    insertString = "insert into family_account values ('" + account_id +"')";
                    s.executeUpdate(insertString);
                    numFamily++;
                    break;
                    
                case 2://business account
                    insertString = "insert into business_account values ('" + account_id +"')";
                    s.executeUpdate(insertString);
                    numBusiness++;
                    break;
                default:
                    break;            
            }
            
            account_id++;
        }
        
        System.out.println(numIndividual + " " + numFamily + " " + numBusiness);
        
		
		
		//phonenumber
		
		try 
        {
            ResultSet result;
            FileReader fileR = new FileReader("randomPhoneNumberList.txt");
            BufferedReader textReader = new BufferedReader(fileR);
            String line;
            result = s.executeQuery("select * from individual_account");
            result.next();
            do {
                idList.add(result.getInt("account_id"));
            }while (result.next());
            
            while ((line = textReader.readLine()) != null)
            {
                
                String insertAddress = line + textReader.readLine();
                if (insertAddress.length() >= 40)
                {
                   insertAddress = insertAddress.substring(0,39);
                }
                String insertString = "insert into customer values ('" + customerID + "'," + "'" + nameList.get(numCustomers) + "','" + insertAddress + "')";
                                System.out.println("Added: " + insertString);
                s.executeUpdate(insertString);
                customerID++;
                numCustomers++;
            }
            
            textReader.close();
            fileR.close();
        }
        
        catch (FileNotFoundException ex)
        {
            System.out.println("Unable to read file");
        }
        
		
		 //phonenumber
		 List <Integer> indList = new ArrayList<Integer>();
        List <Integer> famList = new ArrayList<Integer>();
        List <Integer> busList = new ArrayList<Integer>();
        int randomNumber;
       
		
		try 
        {
            ResultSet result;
            FileReader fileR = new FileReader("randomPhoneNumberList.txt");
            BufferedReader textReader = new BufferedReader(fileR);
            String line;
            result = s.executeQuery("select * from individual_account");
            result.next();
            do {
                indList.add(result.getInt("account_id"));
            }while (result.next());
            
            result = s.executeQuery("select * from family_account");
            result.next();
            do {
                famList.add(result.getInt("account_id"));
            }while (result.next());
            
            result = s.executeQuery("select * from business_account");
            result.next();
            do {
                busList.add(result.getInt("account_id"));
            }while (result.next());
            
            int indCounter = 0;int famCounter = 0;int busCounter = 0;
            String insertString = "";
            while ((line = textReader.readLine()) != null)
            {
                if (indCounter < indList.size())
                {
                    insertString = "insert into phone_number values ('" + line + "'," + "'" + indList.get(indCounter) + "','" + "Primary" + "')";
                    System.out.println("Added: " + insertString);
                    s.executeUpdate(insertString);
                    indCounter++;
                }
                
                else if (famCounter < famList.size())
                {
                   randomNumber = rand.nextInt(4) + 1; 
                   int randomCounter = 1;
                   int famID = famList.get(famCounter);
                   
                    
                    
                        insertString = "insert into phone_number values ('" + line + "'," + "'" + famID + "','" + "Primary" + "')";
                        System.out.println("Added: " + insertString);
                        s.executeUpdate(insertString);
                    
                   
                   while ((line = textReader.readLine()) != null && (randomCounter  < randomNumber) )
                   {
                       insertString = "insert into phone_number values ('" + line + "'," + "'" + famID + "','" + "Other" + "')";
                       System.out.println("Added: " + insertString);
                       s.executeUpdate(insertString);
                       randomCounter++;
                   }
                   famCounter++;
                }
                
               else if (busCounter < busList.size())
                {
                   randomNumber = rand.nextInt(7) + 2; 
                   int randomCounter = 2;
                   int busID = busList.get(busCounter);
                   
                    
                    
                        insertString = "insert into phone_number values ('" + line + "'," + "'" + busID + "','" + "Primary" + "')";
                        System.out.println("Added: " + insertString);
                        s.executeUpdate(insertString);
                    
                   
                   while ((line = textReader.readLine()) != null && (randomCounter  < randomNumber) )
                   {
                       insertString = "insert into phone_number values ('" + line + "'," + "'" + busID + "','" + "Other" + "')";
                       System.out.println("Added: " + insertString);
                       s.executeUpdate(insertString);
                       randomCounter++;
                   }
                   busCounter++;
                }
                
                
            }
            
            textReader.close();
            fileR.close();
        }
        
        catch (FileNotFoundException ex)
        {
            System.out.println("Unable to read file");
        }
		
		
		
		 //Fills up phone table first:
		List <String> numberList = new ArrayList<String>();
        int MEID = 10000;
        String manufacturerList[] = {"Samsung","Apple","Lenovo Motorola","Xiaomi","Huawei","LG Electronics","Sony Mobile","Microsoft"};
        
        String samsungPhones[] = {"Galaxy S7 Edge","Galaxy Note 6", "Galaxy S5", "Galaxy S3", "Galaxy S4"};
        String applePhones[] = {"iPhone 5","iPhone 5C","iPhone 6","iPhone 4","iPhone 4S"};
        String motorolaPhones[] = {"Moto X Force","Droid Turbo 2","Droid Maxx 2","Moto X Style","Moto G Turbo Edition"};
        String xiaomiPhones[] = {"Mi 5","Mi 4S","Redmi 3","Redmi Note Prime","Redmi Note 3"};
        String huaweiPhones[] = {"Honor Holly 2 Plus","Nexus 6P","Mate S","G7 Plus","Honor 5X","Y6 Pro"};
        String lgPhones[] = {"LG G5","LG V10","LG G4","LG G Flex 2"};
        String sonyPhones[] = {"Xperia X Performance","Xperia X","Xperia XA Dual","Xperia XA"};
        String microsoftPhones[] = {"Lumia 650","Lumia 950 XL Dual SIM","Lumia 950 XL","Lumia 950","Lumia 550"};
        
        
        ResultSet result = s.executeQuery("select * from phone_number");
        while (result.next())
        {
            numberList.add(result.getString("phone_num"));
        }
        
        int activeCounter = 0;
        int unactiveCounter = 0;
        int info_id = 1000;
        int network_time_period = 0;
        for (int counter = 0; counter < 3002; counter++)
        {
            String model = "";
            int randomNum = rand.nextInt(8);
            String manufacturer = manufacturerList[randomNum];
            switch (randomNum)
            {
                case 0:
                    randomNum = rand.nextInt(5);
                    model = samsungPhones[randomNum];
                    break;
                case 1:
                    randomNum = rand.nextInt(5);
                    model = applePhones[randomNum];
                    break;
                case 2:
                    randomNum = rand.nextInt(5);
                    model = motorolaPhones[randomNum];
                    break;
                case 3:
                    randomNum = rand.nextInt(5);
                    model = xiaomiPhones[randomNum];
                    break;
                case 4:
                    randomNum = rand.nextInt(6);
                    model = huaweiPhones[randomNum];
                    break;
                case 5:
                    randomNum = rand.nextInt(4);
                    model = lgPhones[randomNum];
                    break;
                case 6:
                    randomNum = rand.nextInt(4);
                    model = sonyPhones[randomNum];
                    break;
                case 7:
                    randomNum = rand.nextInt(5);
                    model = microsoftPhones[randomNum];
                    break;
                default:
                    break;
                             
            }
            String insertString = "insert into phone values (" + MEID + "," + "'" + manufacturer + "','" + model + "')";

            s.executeUpdate(insertString);
            
            //Marking the phone as active or unactive:
            if (activeCounter < 1515)
            {
                insertString = "insert into active_phone values (" + MEID + "," + "'" + numberList.get(activeCounter) + "')";
                s.executeUpdate(insertString);
                activeCounter++;
            }
            else
            {
                insertString = "insert into unactive_phone values (" + MEID + "," + "'" + info_id + "','" + network_time_period + "','" + numberList.get(unactiveCounter) + "')";
                s.executeUpdate(insertString);
                int randomNumber = rand.nextInt(3);
                unactiveCounter += randomNumber;
                info_id++;
                network_time_period += randomNumber * 3;
            }
           
            
            MEID++;
        }
		
		
		
		 SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
       List <String> phoneNum = new ArrayList<String>();
       List <String> dateList = new ArrayList<String>();
       String phoneList = "select * from phone_number";
       ResultSet result = s.executeQuery(phoneList);
       
       while (result.next())
           phoneNum.add(result.getString("phone_num"));

       int usage_id = 100;
       int randomNumber;
       try 
       {
           FileReader fileR = new FileReader("randomDateList.txt");
           BufferedReader bw = new BufferedReader(fileR);
           String line;
           String insertString;
           
           while ((line = bw.readLine()) != null)
               dateList.add(line);
           
            for (int counter = 0; counter < phoneNum.size(); counter++)
            {
                int randomUsage = rand.nextInt(8) + 1;
                
                for (int counter2 = 0; counter2 < randomUsage; counter2++)
                {
                    String number = phoneNum.get(counter);
                    randomNumber = rand.nextInt(1514);
                    String otherNumber = phoneNum.get(randomNumber);
                    while (otherNumber.equals(number))
                      {
                            randomNumber = rand.nextInt(1514);
                            otherNumber = phoneNum.get(randomNumber);
                      }
                    String type;
                    String otherType;
                    randomNumber = rand.nextInt(2);
                    if (randomNumber == 0)
                    {
                        type = "Source";
                        otherType = "Destination";
                    }
                    else
                    {
                        type = "Destination";
                        otherType = "Source";
                    }
                        
                    insertString = "insert into usage values ('" + usage_id + "'," + "'" + number + "','" + type + "')";
                    s.executeUpdate(insertString);
                    randomNumber = rand.nextInt(3);
                    
                    switch(randomNumber)
                    {
                    case 0: //internet
                        randomNumber = rand.nextInt(9999) + 1;
                        insertString = "insert into internet_usage values ('" + usage_id + "'," + "'" + randomNumber +  "')";
                        System.out.println(insertString);
                        s.executeUpdate(insertString);
                        break;
                    case 1: //text
                        int text_size = rand.nextInt(2000) + 1;
                        String time = dateList.get(rand.nextInt(1000));
                        insertString = "insert into text_usage values ('" + usage_id + "',TO_TIMESTAMP('" + time + "', 'DD-MM-YYYY HH24:MI:SS'),'" + text_size + "','" + otherNumber + "')";
                        System.out.println(insertString);
                        s.executeUpdate(insertString);
                    case 2: //call
                        try {
                            int randChoice1 = rand.nextInt(1999);
                            int randChoice2 = randChoice1 + 1;
                            String time1 = dateList.get(randChoice1);
                            String time2 = dateList.get(randChoice2);
                            java.util.Date d1 = format.parse(time1);
                            java.util.Date d2 = format.parse(time2);
                            long duration = d2.getTime() - d1.getTime() / 1000;
                            System.out.println(time1 + " " + time2 + " " + duration);

                            insertString = "insert into call_usage values ('" + usage_id + "',TO_TIMESTAMP('" + time1 + "', 'DD-MM-YYYY HH24:MI:SS'),TO_TIMESTAMP('" + time2 + "', 'DD-MM-YYYY HH24:MI:SS'),'" + duration + "','" + otherNumber + "')";
                            System.out.println(insertString);
                            s.executeUpdate(insertString);
                        }
                        catch (Exception e) 
                        {
                        }
                        
                            
                        break;
                     
                    default:
                        break;
                    }
                    usage_id++;
                }

            }

             bw.close();
             fileR.close();

       }
       catch (FileNotFoundException ex)
        {
            System.out.println("Unable to read file");
        }
		
		
		 int remainingPhones = 2217 - 1515;
        List <Integer> idList = new ArrayList<Integer>();
        List <Integer> meidList = new ArrayList<Integer>();
        List <Integer> accountList = new ArrayList<Integer>();
        List <String> numberList = new ArrayList<String>();
        
        String searchFor = "select * from customer";
        
        ResultSet result = s.executeQuery(searchFor);
        while (result.next())
            idList.add(result.getInt("cust_id"));
        
        searchFor = "select *\n" +
                    "from active_phone natural join phone_number\n" +
                    "order by phone_num desc";
        result = s.executeQuery(searchFor);
        
        while (result.next())
        {
            accountList.add(result.getInt("account_id"));
            meidList.add(result.getInt("meid"));
        }
          
        String updateString;
        for (int counter = 0; counter < 1515; counter++)
        {
            updateString = "insert into owns values ('" + idList.get(counter) + "','" + meidList.get(counter) + "')";
            s.executeUpdate(updateString);
            
            updateString = "insert into has values ('" + idList.get(counter) + "','" + accountList.get(counter) + "')";
            s.executeUpdate(updateString);
        }
		
		
		List <String> planType = new ArrayList<String>();
        List <Double> callRate = new ArrayList<Double>();
        List <Double> textRate = new ArrayList<Double>();
        List <Double> byteRate = new ArrayList<Double>();
        List <Double> monthlyRate = new ArrayList<Double>();
        
        
        
        planType.add("fixed rate per call minute");
        planType.add("fixed rate per text");
        planType.add("fixed rate per byte");
        planType.add("fixed monthly rate for an upper limit of minutes, texts, bytes");
        planType.add("free calls and texts to a specified list");
        planType.add("free calls and texts to other Jog customers");
        
        
        callRate.add(0.10);
        textRate.add(0.08);
        byteRate.add(0.30);
        monthlyRate.add(10.00);
        
        callRate.add(0.40);
        textRate.add(0.03);
        byteRate.add(0.30);
        monthlyRate.add(3.00);
        
        callRate.add(0.40);
        textRate.add(0.08);
        byteRate.add(0.02);
        monthlyRate.add(8.00);
        
        callRate.add(0.14);
        textRate.add(0.05);
        byteRate.add(0.05);
        monthlyRate.add(50.00);
        
        callRate.add(0.15);
        textRate.add(0.05);
        byteRate.add(0.03);
        monthlyRate.add(80.00);
        
        callRate.add(0.10);
        textRate.add(0.04);
        byteRate.add(0.04);
        monthlyRate.add(60.00);
        
        int randomNumber;
        String updateString;
        int planId = 100;
        for (int counter = 0; counter < 614; counter++)
        {
            randomNumber = rand.nextInt(6);
            updateString = "insert into billing_plan values ('" + planId + "','" + planType.get(randomNumber) + "','" + callRate.get(randomNumber) + "','" + textRate.get(randomNumber) + "','" + byteRate.get(randomNumber) + "','" + monthlyRate.get(randomNumber) + "')";
            s.executeUpdate(updateString);
            planId++;
        }
        
		
		List <Integer> usageList = new ArrayList<Integer>();
        List <Integer> accountList = new ArrayList<Integer>();
        List <Integer> billingList = new ArrayList<Integer>();
        
        String searchFor = "select *\n" +
                           "from usage natural join phone_number";
        String insertString;
        
        ResultSet result = s.executeQuery(searchFor);
        
        while (result.next())
        {
            usageList.add(result.getInt("usage_id"));
            accountList.add(result.getInt("account_id"));
        }
        
        searchFor = "select * from billing_plan";
        result = s.executeQuery(searchFor);
        
        while (result.next())
        {
            billingList.add(result.getInt("billing_id"));
        }
        
        for (int counter = 0; counter < 614; counter++)
        {
            insertString = "insert into usage_billing values ('" + usageList.get(counter) + "','" +  billingList.get(counter) + "')";
            s.executeQuery(insertString);
            
            insertString = "insert into acc_plan values ('" + accountList.get(counter) + "','" +  billingList.get(counter) + "')";
            s.executeQuery(insertString);
        }
		
		
		//store
		try 
        {
            FileReader fileR = new FileReader("randomAddressList2.txt");
            BufferedReader textReader = new BufferedReader(fileR);
            String line;
            int storeID = 1000;
            
            while ((line = textReader.readLine()) != null)
            {
                
                String insertAddress = line + textReader.readLine();
                if (insertAddress.length() >= 40)
                {
                   insertAddress = insertAddress.substring(0,39);
                }
                String insertString = "insert into physical_store values ('" + storeID+ "'," + "'" +  insertAddress + "')";
                                System.out.println("Added: " + insertString);
                s.executeUpdate(insertString);
                storeID++;

            }
            
            textReader.close();
            fileR.close();
        }
        
        catch (FileNotFoundException ex)
        {
            System.out.println("Unable to read file");
        }
        
		
        //set up and sells
         String searchFor = "select * from active_phone natural join phone_number";
         String insertString;
         List<Integer> meidList = new ArrayList<Integer>();
         List<Integer> accountList = new ArrayList<Integer>();
         List<Integer> storeList = new ArrayList<Integer>();
         List<Integer> unactiveList = new ArrayList<Integer>();
         
         ResultSet result = s.executeQuery(searchFor);
         while (result.next())
         {
             meidList.add(result.getInt("meid"));
             accountList.add(result.getInt("account_id"));
         }
         
         searchFor = "select * from physical_store";
         result = s.executeQuery(searchFor);
         while (result.next())
             storeList.add(result.getInt("store_id"));
         
         for (int counter = 0; counter < accountList.size(); counter++)
         {
             int randomNumber = rand.nextInt(1913);
             insertString = "insert into sold values ('" + storeList.get(randomNumber) + "','" + meidList.get(counter) + "')";
             s.executeUpdate(insertString);
             
             insertString = "insert into set_up values ('" + accountList.get(counter) + "','" + storeList.get(randomNumber) + "')";
             s.executeUpdate(insertString);
         }
         searchFor = "select * from unactive_phone";
         result = s.executeQuery(searchFor);
         while (result.next())
             unactiveList.add(result.getInt("meid"));
         
         for (int counter = 0; counter < unactiveList.size(); counter++)
         {
             int randomNumber = rand.nextInt(1913);
             insertString = "insert into sold values ('" + storeList.get(randomNumber) + "','" + unactiveList.get(counter) + "')";
             s.executeUpdate(insertString);
         }
         
		 
		 //has unactive_phone version
		 
		  String searchFor = "select *\n" +
                            "from customer natural left outer join has\n" +
                            "where account_id is null";
        List <Integer> customerList = new ArrayList<Integer>();
        List <Integer> meidList = new ArrayList<Integer>();
        ResultSet result = s.executeQuery(searchFor);
        while (result.next())
            customerList.add(result.getInt("cust_id"));
        searchFor = "select * from unactive_phone";
        result = s.executeQuery(searchFor);
        while (result.next())
            meidList.add(result.getInt("meid"));
       String insertString;
        for (int counter = 0; counter < customerList.size(); counter++)
        {
            insertString = "insert into owns values ('" + customerList.get(counter) + "','" + meidList.get(counter) + "')";
            s.executeUpdate(insertString);
        }
        
		
		
		//Num customers: 1914 Individual accounts: 507 Family accounts: 495 Business acounts: 499 Total Accounts: 1501
        
        
		
		//Insert passwords
		 int account_id = 10000;
        for (int counter = 0; counter < 614; counter++)
        {
             String uuid = UUID.randomUUID().toString().replaceAll("-", "");
             if (uuid.length() >= 12)
                uuid = uuid.substring(0,11);
             String updateString = "update account SET password = '" + uuid + "' where account_id = '" + account_id + "'";
             s.executeUpdate(updateString);
             account_id++;
        }
		
		
		//
		
		 String searchFor = "select account_id from account";
        ResultSet result = s.executeQuery(searchFor);
        
        while (result.next())
            idList.add(result.getString(1));
        
        for (int counter = 0; counter < 614; counter++)
        {
            int randomNumber = rand.nextInt(4) + 1;
            String insertString = "insert into acc_plan values (" + idList.get(counter) + "," + randomNumber + ")";
            System.out.println(insertString);
            s.executeUpdate(insertString);
            
        }  

//call_bill
 int billID = 1;
        
        List <String> call_id = new ArrayList<String>();
        List <String> time = new ArrayList<String>();
        List <Double> call_rate = new ArrayList<Double>();
        List <Long> duration = new ArrayList<Long>();
        
        String searchString = "select usage_id,end_time,duration,call_rate\n" +
                            "from call_usage natural join usage natural join phone_number natural join account natural join billing_plan";
        ResultSet result = s.executeQuery(searchString);
        while (result.next())
        {
            call_id.add(result.getString(1));
            time.add(result.getString(2));
            call_rate.add(result.getDouble(4));
            duration.add(result.getLong(3));
        }
        for (int counter = 0; counter < call_id.size(); counter++)
        {
            double charging = call_rate.get(counter)*duration.get(counter)/60;
            String to_charge = String.format("%.2f", charging);
            billID += counter;
            String insertString = "insert into bill values (" + billID + "," + call_id.get(counter) + "," + to_charge + ", TO_TIMESTAMP('" + (time.get(counter)) + "', 'YYYY-MM-DD HH24:MI:SS'))";
            System.out.println(insertString);
            s.executeUpdate(insertString);
        }


//text_bill

Long billID = 161199992L;
        
        List <String> text_id = new ArrayList<String>();
        List <String> time = new ArrayList<String>();
        List <Double> text_rate = new ArrayList<Double>();
        
        String searchString = "select usage_id,time,text_rate\n" +
                            "from text_usage natural join usage natural join phone_number natural join account natural join billing_plan";
        ResultSet result = s.executeQuery(searchString);
        while (result.next())
        {
            text_id.add(result.getString(1));
            time.add(result.getString(2));
            text_rate.add(result.getDouble(3));
        }
        for (int counter = 0; counter < text_id.size(); counter++)
        {
            double charging = text_rate.get(counter);
            String to_charge = String.format("%.2f", charging);
            billID += counter;
            String insertString = "insert into bill values (" + billID + "," + text_id.get(counter) + "," + to_charge + ", TO_TIMESTAMP('" + (time.get(counter)) + "', 'YYYY-MM-DD HH24:MI:SS'))";
            System.out.println(insertString);
            s.executeUpdate(insertString);
        }
       

//internet_bill

Long billID = 199739803L;
        
        List <String> internet_id = new ArrayList<String>();
        List <String> time = new ArrayList<String>();
        List <Double> internet_rate = new ArrayList<Double>();
        List <Long> size_byte = new ArrayList<Long>();

        String searchString = "select end_time from call_usage order by usage_id";
        ResultSet result = s.executeQuery(searchString);
        while (result.next())
            time.add(result.getString(1));
        
        searchString = "select usage_id,byte_rate,total_usage\n" +
                            "from internet_usage natural join usage natural join phone_number natural join account natural join billing_plan";
        result = s.executeQuery(searchString);
        while (result.next())
        {
            internet_id.add(result.getString(1));

            internet_rate.add(result.getDouble(2));
            size_byte.add(result.getLong(3));
        }
        for (int counter = 0; counter < internet_id.size(); counter++)
        {
            double charging = internet_rate.get(counter) * size_byte.get(counter) ;
            String to_charge = String.format("%.2f", charging);
            billID += counter + 0L;
            String insertString = "insert into bill values (" + billID + "," + internet_id.get(counter) + "," + to_charge + ", TO_TIMESTAMP('" + (time.get(counter)) + "', 'YYYY-MM-DD HH24:MI:SS'))";
            System.out.println(insertString);
            s.executeUpdate(insertString);
        }
       
	   
	   
	   //populate usage
	   
	   /*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package populateprojectdb;

import java.io.IOException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.Random;
import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.sql.Date;
import java.sql.Timestamp;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
        import java.util.UUID;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 *
 * @author Rafael
 */
public class PopulateProjectDB {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args)
    throws SQLException, IOException, java.lang.ClassNotFoundException
    {
        
         Statement s = null;
         Connection con = null;
         Random rand = new Random();
         List <String> idList = new ArrayList<String>();
         
        Class.forName ("oracle.jdbc.driver.OracleDriver");
        con = DriverManager.getConnection
              ("jdbc:oracle:thin:@edgar1.cse.lehigh.edu:1521:cse241","rcd315",
               "Med1nho93");
        s=con.createStatement();
      
        List <String> dateList = new ArrayList<String>();
        List <Long> phoneList = new ArrayList<Long>();
        List <String> otherList = new ArrayList<String>();
        try
        {
            FileReader fileR = new FileReader("randomDateList.txt");
            BufferedReader bw = new BufferedReader(fileR);
            String line;
            while  (( line = bw.readLine() ) != null)
            {
                dateList.add(line);
            }
            bw.close();
            fileR.close();
            
            FileReader fileReader = new FileReader("newPhoneList.txt");
            BufferedReader buff = new BufferedReader(fileReader);
            while  (( line = buff.readLine() ) != null)
            {
                otherList.add(line);
            }
            buff.close();
            fileReader.close();
            
            String searchFor = "select phone_num from phone_number";
            ResultSet result = s.executeQuery (searchFor);
            while (result.next())
                phoneList.add(result.getLong(1));
            SimpleDateFormat format = new SimpleDateFormat("dd-MM-yyyy HH:mm:ss");
            int usage_id = 9996;
            for (int counter = 0; counter < 1515; counter++)
            {
                
                for (int count = 0 ; count < dateList.size() -1; count++)
                {
                    usage_id++;
                    int type = rand.nextInt(2);
                    String typeOf;
                    if (type == 1)
                        typeOf = "Destination";
                    else
                        typeOf = "Source";
                    String insertString = "insert into usage values("+usage_id + "," + phoneList.get(counter) + ",'" +typeOf + "')";

                    s.executeUpdate(insertString);
                                        System.out.println(insertString);
                    int randomNumber = rand.nextInt(3);

                    System.out.println(randomNumber);
                    switch (randomNumber) 
                    {
                    //internet
                        case 0:
                            
                            int randomByte = rand.nextInt(30) + 1;
                            insertString = "insert into internet_usage values (" + usage_id + "," + randomByte + ")";
                            s.executeUpdate(insertString);
                            System.out.println("Net");
                        break;
                    //text
                        case 1:
                            
                                int randomPhone = rand.nextInt(299);
                                int size = rand.nextInt(200) + 1;
                                insertString = "insert into text_usage values (" + usage_id + ",TO_TIMESTAMP('" + dateList.get(count) + "','DD-MM-YYYY HH24:MI:SS')," +
                                        size + "," + otherList.get(randomPhone) + ")";
                                s.executeUpdate(insertString);
                                System.out.println("Text");
                        break;
                            
                        default:
                            //call
                            
                            int randomPhones = rand.nextInt(299);
                            int biscoito = rand.nextInt(613);
                            String time1 = dateList.get(count);
                            String time2 = dateList.get(count + 1);
                            java.util.Date d1 = format.parse(time1);
                            java.util.Date d2 = format.parse(time2);
                            long duration = d2.getTime() - d1.getTime() / 1000;
                            insertString = "insert into call_usage values (" + usage_id + ",TO_TIMESTAMP('" + time1 + "','DD-MM-YYYY HH24:MI:SS')," +
                                    "TO_TIMESTAMP('" + time2 + "','DD-MM-YYYY HH24:MI:SS')," + duration + "," + otherList.get(randomPhones) + ")";
                            //System.out.println(insertString);
                            s.executeUpdate(insertString);
                            System.out.println("Call");
                        break;
                            
                    }
                }
                System.out.println("Moving on!");
            }
            
            
            
            
            
        }
        catch (FileNotFoundException ex)
        {
            System.out.println("Abiboreboborebabo");
        } catch (ParseException ex) {
            Logger.getLogger(PopulateProjectDB.class.getName()).log(Level.SEVERE, null, ex);
        }
                 
       
        s.close();
        con.close();
    }
    
        
    
}
